import httplib
import json
import ConfigParser
import subprocess
import shutil
import time
import shlex

cf = ConfigParser.ConfigParser()

class CleanUpScript(object):
    '''
    CleanUp Script
    '''


    def __init__(self):
        cf.read("config.cfg")  
        self.swarm_id = cf.get("Swarm", "swarm_id")
        self.hostname = cf.get("Server Information", "hostname")
        self.api_key_Conf = cf.get("Keys", "configuration")
        self.api_key_Part = cf.get("Keys", "participation")
        
    def main(self):
        self.resourceList(self.hostname, self.api_key_Conf, self.swarm_id) #Fetch List of Resources in a particular swarm
        self.dropDBTables()  #Drop the Database Tables
        self.removeDirectories() #Remove all the AutoGenerated Directories  --this method should be called before cleanConfigFiles Method
        self.cleanConfigFiles() #Clean the Python configuration files
        self.startNodeServer()  #Starting Node Server in the Back end
        time.sleep(5) #Give some time so server started 
        self.insertIntoDBTables()   #inserting static values in tables

    def resourceList(self,hostname, api_key, swarm_id):
        resource_id = ''
        conn = httplib.HTTPConnection(hostname)
        conn.request("GET", "/swarms/%s"%(swarm_id), None, {"x-bugswarmapikey":api_key})
        resp = conn.getresponse()
        txt = resp.read()
        conn.close()
        json_obj = json.loads(txt)
        for resources in json_obj["resources"]:
            if resources["resource_type"] == "consumer":
                resource_id = resources["resource_id"]
        for resources in json_obj["resources"]:
            if resources["resource_type"] != "consumer" and resources["resource_id"] != resource_id:
                self.deleteResource(self.hostname, self.api_key_Conf, resources["resource_id"])   #Delete the Resource 
        print "All the resources deleted successfully"        
                
    def deleteResource(self,hostname, api_key, resource_id):
        conn = httplib.HTTPConnection(hostname)
        conn.request("DELETE", "/resources/%s"%(resource_id), None, {"x-bugswarmapikey":api_key})
        resp = conn.getresponse()
        txt = resp.status
        conn.close()
        if str(txt) == "204":
            print "Resource Deleted from Swarm"
        else:
            print "Something went wrong! :("
        
        
    def dropDBTables(self):
        subprocess.Popen(shlex.split('sh dropDBTables.sh'))
        print "Database Tables Dropped Successfully"
    
    def removeDirectories(self):
        cf.read("status.cfg")
        cf.options("Status")
        for dirName in cf.options("Status"):
            try:
                shutil.rmtree(dirName)
            except:
                print "Directory not Present"
        print "All the Folders are deleted"
    
    def cleanConfigFiles(self):
        f = open("resources.cfg", "w+")
        f.write("[Resources]")
        f.close()
        f = open("status.cfg", "w+")
        f.write("[Status]")
        f.close()
        f = open("OnlineProducersProcessId.cfg", "w+")
        f.close()
        f = open("stock.cfg", "w+")
        f.close()
        cf.read("config.cfg")
        cf.set("Swarm", "resource_id", "")
        f = open('config.cfg', 'w')
        cf.write(f)
        f.close()
        print "Config Files Cleaned Successfully"
        
    def startNodeServer(self):
        subprocess.Popen(shlex.split('nohup sh startNodeServer.sh'))
        print "Node Server Started"
        
    def insertIntoDBTables(self):
        subprocess.Popen(shlex.split('sh insertIntoDBTables.sh'))
        print "Tables Created in Database"


if __name__ == "__main__":
    obj = CleanUpScript()
    obj.main()